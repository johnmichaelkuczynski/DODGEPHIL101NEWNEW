FIX THE FINAL EXAM START FLOW (NO INTERMEDIATE SCREEN, BUTTON WORKS)
Goal: One click → generate exam → show it. No modal, no second “Generate” button, no alerts. Inline loader, reliable call, clear errors.

1) Remove the interstitial
Delete/disable the intermediate “Generating Your Final Exam” screen/modal entirely.

The only place a user should click is the primary Start Final Exam button on the Final Exam page.

2) Single call, single button
The Start Final Exam button must:

Trigger exactly one async call to the server to generate the exam.

Immediately disable itself and show an inline spinner/text: “Generating exam…”.

Re-enable only if the call fails.

Ensure this button is not inside a <form>. If it is, remove the form wrapper or set the button to type=button.

Remove any overlays or wrappers that can block clicks (no pointer-events:none on ancestors).

3) Server endpoint reliability
Point the button to one server endpoint dedicated to exam generation (reuse the same route you already created for LLM generation).

Set request timeout to 120s minimum.

If provider returns 429/503, retry once after 1.5s backoff.

If it fails, return a clear JSON error; do not throw an HTML page or modal alert.

4) Inline error display (no popups)
On failure, show an inline message on the exam page:

“Couldn’t generate the exam. Reason: <short provider error>. Try again.”

Keep the user on the same page. Re-enable the Start button.

5) Environment + payload guardrails
Confirm the LLM provider keys are loaded in this environment (same keys the app uses elsewhere). If missing, the endpoint should return: “LLM credentials missing.”

Increase body/response size limits so the exam JSON isn’t rejected.

Store the generated exam for the current attempt so it doesn’t regenerate on refresh until submit.

6) No duplicate CTAs
Ensure there is only one actionable CTA related to generation on this page:

Start Final Exam (before generation)

Regenerate New Exam (only shown after results or when user explicitly cancels the current attempt)

7) Acceptance checks (don’t mark done until all pass)
 There is no intermediate modal/screen.

 One click on Start Final Exam triggers generation and shows inline loader.

 The button disables during generation and re-enables on error.

 No alerts/popups; errors appear inline with the real provider message.

 Exam appears immediately after generation; user can start answering.

 Refresh does not create a new exam mid-attempt.

 A separate Regenerate New Exam control exists only after completion/cancel.

If they still get a failure after this, the likely culprits are:

Missing/incorrect LLM API key in this Replit environment.

Request timing out at 30s because of default fetch/server limits.

JSON too large for default body parser.

Have them check those three immediately if the first pass doesn’t fix it.









Ask ChatGPT
